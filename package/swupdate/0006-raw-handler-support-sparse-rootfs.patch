From b16a588afeba61f152138a5c6a971ea197c0b1cd Mon Sep 17 00:00:00 2001
From: wuhuabin <wuhuabin@allwinnertech.com>
Date: Thu, 17 Nov 2022 14:00:12 +0800
Subject: [PATCH] raw handler: support sparse rootfs

Signed-off-by: wuhuabin <wuhuabin@allwinnertech.com>
---
 handlers/Makefile               |   1 +
 handlers/raw_handler.c          |  49 ++++
 handlers/sparse/Makefile        |   2 +
 handlers/sparse/ext4_utils.h    | 173 +++++++++++++
 handlers/sparse/simg2img.c      | 439 ++++++++++++++++++++++++++++++++
 handlers/sparse/simg2img.h      |   6 +
 handlers/sparse/spare_head.h    | 122 +++++++++
 handlers/sparse/sparse_crc32.c  | 111 ++++++++
 handlers/sparse/sparse_crc32.h  |  18 ++
 handlers/sparse/sparse_format.h |  50 ++++
 10 files changed, 971 insertions(+)
 create mode 100755 handlers/sparse/Makefile
 create mode 100755 handlers/sparse/ext4_utils.h
 create mode 100755 handlers/sparse/simg2img.c
 create mode 100755 handlers/sparse/simg2img.h
 create mode 100755 handlers/sparse/spare_head.h
 create mode 100755 handlers/sparse/sparse_crc32.c
 create mode 100755 handlers/sparse/sparse_crc32.h
 create mode 100755 handlers/sparse/sparse_format.h

diff --git a/handlers/Makefile b/handlers/Makefile
index 420e0c8..fc91a09 100644
--- a/handlers/Makefile
+++ b/handlers/Makefile
@@ -8,6 +8,7 @@
 # Handler can be called dynamically based
 # on the received image type.
 obj-y	+= dummy_handler.o
+obj-y	+= sparse/
 obj-$(CONFIG_ARCHIVE) += archive_handler.o
 obj-$(CONFIG_AWBOOT_HANDLER)	+= awboot_handler.o
 obj-$(CONFIG_BOOTLOADERHANDLER) += boot_handler.o
diff --git a/handlers/raw_handler.c b/handlers/raw_handler.c
index 540bec1..d3436c4 100644
--- a/handlers/raw_handler.c
+++ b/handlers/raw_handler.c
@@ -18,15 +18,19 @@
 #include <stdlib.h>
 #include <errno.h>
 #include <libgen.h>
+#include <cpiohdr.h>
 
 #include "swupdate.h"
 #include "handler.h"
 #include "util.h"
+#include "sparse/simg2img.h"
 
 void raw_image_handler(void);
 void raw_file_handler(void);
 void raw_copyimage_handler(void);
 
+#define NPAD_BYTES(o) ((4 - (o % 4)) % 4)
+
 /**
  * Handle write protection for block devices
  *
@@ -111,6 +115,10 @@ static int install_raw_image(struct img_type *img,
 	int ret;
 	int fdout;
 
+	const char *str[2] = {"rootfs", "rootfsbak"};
+	int i = 0;
+	unsigned long tmp_offset = 0;
+
 	int prot_stat = blkprotect(img, false);
 	if (prot_stat < 0)
 		return prot_stat;
@@ -121,6 +129,46 @@ static int install_raw_image(struct img_type *img,
 			img->device, strerror(errno));
 		return -ENODEV;
 	}
+
+	// if not rootfs, goto normal update
+	if (strcmp(str[0], img->fname) != 0) {
+		TRACE("update normal image: %s\n", img->fname);
+		goto normal_image;
+	}
+
+	// if is rootfs, try sparse
+	for (i = 0; i < 2; i++) {
+		if (strcmp(str[i], img->fname) == 0) {
+			INFO("find [%s] to use, try sparse!\n", img->fname);
+
+			//tmp_offset = img->offset;
+			//printf("img->offset:%u\n", tmp_offset);
+			//tmp_offset = strlen(img->fname);
+			//printf("strlen(img->fname):%u\n", tmp_offset);	//rootfs, 6
+			//tmp_offset = sizeof(struct new_ascii_header);
+			//printf("sizeof(struct new_ascii_header):%u\n", tmp_offset);	//110
+
+			tmp_offset = img->offset + strlen(img->fname) + sizeof(struct new_ascii_header);
+			//printf("tmp_offset all:%u\n", tmp_offset);
+			if (i == 0)
+				tmp_offset += 4;
+			else if (i == 1)
+				tmp_offset += 1;
+			//printf("tmp_offset :%u\n", tmp_offset);
+			ret = sparse_main(img->fdin, fdout, tmp_offset);
+			if (!ret)
+			{
+				INFO("update sparse rootfs success!\n");
+				goto file_close;
+			} else {
+				INFO("update sparse rootfs failed! Try normal rootfs.\n");
+				//read some information from img->fdin in sparse_main function, should go back to tmp_offset.
+				lseek(img->fdin, tmp_offset, SEEK_SET);
+			}
+		}
+	}
+
+normal_image:
 #if defined(__FreeBSD__)
 	ret = copyimage(&fdout, img, copy_write_padded);
 #else
@@ -132,6 +180,7 @@ static int install_raw_image(struct img_type *img,
 		blkprotect(img, true);  // no error handling, keep ret from copyimage
 	}
 
+file_close:
 	close(fdout);
 	return ret;
 }
diff --git a/handlers/sparse/Makefile b/handlers/sparse/Makefile
new file mode 100755
index 0000000..9083d14
--- /dev/null
+++ b/handlers/sparse/Makefile
@@ -0,0 +1,2 @@
+obj-y	+= simg2img.o
+obj-y	+= sparse_crc32.o
\ No newline at end of file
diff --git a/handlers/sparse/ext4_utils.h b/handlers/sparse/ext4_utils.h
new file mode 100755
index 0000000..ac5387c
--- /dev/null
+++ b/handlers/sparse/ext4_utils.h
@@ -0,0 +1,173 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _EXT4_UTILS_H_
+#define _EXT4_UTILS_H_
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE
+#endif
+#define _FILE_OFFSET_BITS 64
+//#define _LARGEFILE64_SOURCE
+#include <sys/types.h>
+#include <unistd.h>
+
+#include <sys/types.h>
+#include <errno.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <setjmp.h>
+
+#if defined(__APPLE__) && defined(__MACH__)
+#define lseek64 lseek
+#define ftruncate64 ftruncate
+#define mmap64 mmap
+#define off64_t off_t
+#endif
+
+#ifdef __BIONIC__
+extern void*  __mmap2(void *, size_t, int, int, int, off_t);
+static inline void *mmap64(void *addr, size_t length, int prot, int flags,
+        int fd, off64_t offset)
+{
+    return __mmap2(addr, length, prot, flags, fd, offset >> 12);
+}
+#endif
+
+extern int force;
+
+#define warn(fmt, args...) do { fprintf(stderr, "warning: %s: " fmt "\n", __func__, ## args); } while (0)
+#define error(fmt, args...) do { fprintf(stderr, "error: %s: " fmt "\n", __func__, ## args); if (!force) longjmp(setjmp_env, EXIT_FAILURE); } while (0)
+#define error_errno(s, args...) error(s ": %s", ##args, strerror(errno))
+#define critical_error(fmt, args...) do { fprintf(stderr, "critical error: %s: " fmt "\n", __func__, ## args); longjmp(setjmp_env, EXIT_FAILURE); } while (0)
+#define critical_error_errno(s, args...) critical_error(s ": %s", ##args, strerror(errno))
+
+#define EXT4_SUPER_MAGIC 0xEF53
+#define EXT4_JNL_BACKUP_BLOCKS 1
+
+#ifndef min /* already defined by windows.h */
+#define min(a, b) ((a) < (b) ? (a) : (b))
+#endif
+
+#define DIV_ROUND_UP(x, y) (((x) + (y) - 1)/(y))
+#define ALIGN(x, y) ((y) * DIV_ROUND_UP((x), (y)))
+
+#define __le64 u64
+#define __le32 u32
+#define __le16 u16
+
+#define __be64 u64
+#define __be32 u32
+#define __be16 u16
+
+#define __u64 u64
+#define __u32 u32
+#define __u16 u16
+#define __u8 u8
+
+typedef unsigned long long u64;
+typedef signed long long s64;
+typedef unsigned int u32;
+typedef unsigned short int u16;
+typedef unsigned char u8;
+
+struct block_group_info;
+
+struct ext2_group_desc {
+	__le32 bg_block_bitmap;
+	__le32 bg_inode_bitmap;
+	__le32 bg_inode_table;
+	__le16 bg_free_blocks_count;
+	__le16 bg_free_inodes_count;
+	__le16 bg_used_dirs_count;
+	__le16 bg_pad;
+	__le32 bg_reserved[3];
+};
+
+struct fs_info {
+	s64 len;	/* If set to 0, ask the block device for the size,
+			 * if less than 0, reserve that much space at the
+			 * end of the partition, else use the size given. */
+	u32 block_size;
+	u32 blocks_per_group;
+	u32 inodes_per_group;
+	u32 inode_size;
+	u32 inodes;
+	u32 journal_blocks;
+	u16 feat_ro_compat;
+	u16 feat_compat;
+	u16 feat_incompat;
+	u32 bg_desc_reserve_blocks;
+	const char *label;
+	u8 no_journal;
+};
+
+struct fs_aux_info {
+	struct ext4_super_block *sb;
+	struct ext4_super_block **backup_sb;
+	struct ext2_group_desc *bg_desc;
+	struct block_group_info *bgs;
+	u32 first_data_block;
+	u64 len_blocks;
+	u32 inode_table_blocks;
+	u32 groups;
+	u32 bg_desc_blocks;
+	u32 default_i_flags;
+	u32 blocks_per_ind;
+	u32 blocks_per_dind;
+	u32 blocks_per_tind;
+};
+
+extern struct fs_info info;
+extern struct fs_aux_info aux_info;
+
+extern jmp_buf setjmp_env;
+
+static inline int log_2(int j)
+{
+	int i;
+
+	for (i = 0; j > 0; i++)
+		j >>= 1;
+
+	return i - 1;
+}
+
+int ext4_bg_has_super_block(int bg);
+void write_ext4_image(int fd, int gz, int sparse, int crc,
+		int wipe);
+void ext4_create_fs_aux_info(void);
+void ext4_free_fs_aux_info(void);
+void ext4_fill_in_sb(void);
+void ext4_create_resize_inode(void);
+void ext4_create_journal_inode(void);
+void ext4_update_free(void);
+void ext4_queue_sb(void);
+u64 get_file_size(int fd);
+u64 parse_num(const char *arg);
+void ext4_parse_sb(struct ext4_super_block *sb);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/handlers/sparse/simg2img.c b/handlers/sparse/simg2img.c
new file mode 100755
index 0000000..161efef
--- /dev/null
+++ b/handlers/sparse/simg2img.c
@@ -0,0 +1,439 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "ext4_utils.h"
+#include "sparse_format.h"
+#include "sparse_crc32.h"
+//#include "config.h"
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <stdio.h>
+
+#define COPY_BUF_SIZE (1024*1024)
+u8 *copybuf;
+
+/* This will be malloc'ed with the size of blk_sz from the sparse file header */
+u8* zerobuf;
+
+#define SPARSE_HEADER_MAJOR_VER 1
+#define SPARSE_HEADER_LEN       (sizeof(sparse_header_t))
+#define CHUNK_HEADER_LEN (sizeof(chunk_header_t))
+
+void usage(void)
+{
+  fprintf(stderr, "Usage: simg2img <sparse_image_file> <raw_image_file>\n");
+}
+
+static int read_all(int fd, void *buf, size_t len)
+{
+	size_t total = 0;
+	int ret;
+	char *ptr = buf;
+
+	while (total < len) {
+		ret = read(fd, ptr, len - total);
+
+		if (ret < 0)
+			return ret;
+
+		if (ret == 0)
+			return total;
+
+		ptr += ret;
+		total += ret;
+	}
+
+	return total;
+}
+
+static int write_all(int fd, void *buf, size_t len)
+{
+	size_t total = 0;
+	int ret;
+	char *ptr = buf;
+
+	while (total < len) {
+		ret = write(fd, ptr, len - total);
+
+		if (ret < 0)
+			return ret;
+
+		if (ret == 0)
+			return total;
+
+		ptr += ret;
+		total += ret;
+	}
+
+	return total;
+}
+
+int process_raw_chunk(int in, int out, u32 blocks, u32 blk_sz, u32 *crc32)
+{
+	u64 len = (u64)blocks * blk_sz;
+	int ret;
+	int chunk;
+
+	while (len) {
+		chunk = (len > COPY_BUF_SIZE) ? COPY_BUF_SIZE : len;
+		ret = read_all(in, copybuf, chunk);
+		if (ret != chunk) {
+			fprintf(stderr, "read returned an error copying a raw chunk: %d %d\n",
+					ret, chunk);
+			exit(-1);
+		}
+		*crc32 = sparse_crc32(*crc32, copybuf, chunk);
+		ret = write_all(out, copybuf, chunk);
+		if (ret != chunk) {
+			fprintf(stderr, "write returned an error copying a raw chunk\n");
+			exit(-1);
+		}
+		len -= chunk;
+	}
+
+	return blocks;
+}
+
+
+int process_fill_chunk(int in, int out, u32 blocks, u32 blk_sz, u32 *crc32)
+{
+	u64 len = (u64)blocks * blk_sz;
+	int ret;
+	int chunk;
+	u32 fill_val;
+	u32 *fillbuf;
+	unsigned int i;
+
+	/* Fill copy_buf with the fill value */
+	ret = read_all(in, &fill_val, sizeof(fill_val));
+	fillbuf = (u32 *)copybuf;
+	for (i = 0; i < (COPY_BUF_SIZE / sizeof(fill_val)); i++) {
+		fillbuf[i] = fill_val;
+	}
+
+	while (len) {
+		chunk = (len > COPY_BUF_SIZE) ? COPY_BUF_SIZE : len;
+		*crc32 = sparse_crc32(*crc32, copybuf, chunk);
+		ret = write_all(out, copybuf, chunk);
+		if (ret != chunk) {
+			fprintf(stderr, "write returned an error copying a raw chunk\n");
+			exit(-1);
+		}
+		len -= chunk;
+	}
+
+	return blocks;
+}
+
+int process_skip_chunk(int out, u32 blocks, u32 blk_sz, u32 *crc32)
+{
+	/* len needs to be 64 bits, as the sparse file specifies the skip amount
+	 * as a 32 bit value of blocks.
+	 */
+	u64 len = (u64)blocks * blk_sz;
+
+	lseek64(out, len, SEEK_CUR);
+
+	return blocks;
+}
+
+int process_crc32_chunk(int in, u32 crc32)
+{
+	u32 file_crc32;
+	int ret;
+
+	ret = read_all(in, &file_crc32, 4);
+	if (ret != 4) {
+		fprintf(stderr, "read returned an error copying a crc32 chunk\n");
+		exit(-1);
+	}
+
+	if (file_crc32 != crc32) {
+		fprintf(stderr, "computed crc32 of 0x%8.8x, expected 0x%8.8x\n",
+			 crc32, file_crc32);
+		exit(-1);
+	}
+
+	return 0;
+}
+#if 1
+int sparse_main(int in, int out, off_t offset)
+{
+
+	unsigned int i;
+	sparse_header_t sparse_header;
+	chunk_header_t chunk_header;
+	u32 crc32 = 0;
+	u32 total_blocks = 0;
+	int ret;
+
+
+	if ( (copybuf = malloc(COPY_BUF_SIZE)) == 0) {
+		fprintf(stderr, "Cannot malloc copy buf\n");
+		return (-1);
+	}
+
+	//if ((in = open(src, O_RDONLY)) == 0) {
+	//	fprintf(stderr, "Cannot open input file %s\n", src);
+	//	return (-1);
+	//}
+
+    lseek64(in, offset, SEEK_SET);
+
+	//if ((out = open(dest, O_WRONLY | O_TRUNC, 0666)) == 0) {
+	//	fprintf(stderr, "Cannot open output file %s\n", dest);
+	//	return (-1);
+	//}
+
+	ret = read_all(in, &sparse_header, sizeof(sparse_header));
+	if (ret != sizeof(sparse_header)) {
+		fprintf(stderr, "Error reading sparse file header\n");
+		return (-1);
+	}
+
+	if (sparse_header.magic != SPARSE_HEADER_MAGIC) {
+		fprintf(stderr, "Bad magic, read value 0x%x, target value 0x%x\n",\
+				sparse_header.magic, SPARSE_HEADER_MAGIC);
+		
+		return (-1);
+	}
+
+	if (sparse_header.major_version != SPARSE_HEADER_MAJOR_VER) {
+		fprintf(stderr, "Unknown major version number\n");
+		return (-1);
+	}
+
+	if (sparse_header.file_hdr_sz > SPARSE_HEADER_LEN) {
+		/* Skip the remaining bytes in a header that is longer than
+		 * we expected.
+		 */
+		lseek64(in, sparse_header.file_hdr_sz - SPARSE_HEADER_LEN, SEEK_CUR);
+	}
+
+	if ( (zerobuf = malloc(sparse_header.blk_sz)) == 0) {
+		fprintf(stderr, "Cannot malloc zero buf\n");
+		return (-1);
+	}
+
+	for (i=0; i<sparse_header.total_chunks; i++) {
+		ret = read_all(in, &chunk_header, sizeof(chunk_header));
+		if (ret != sizeof(chunk_header)) {
+			fprintf(stderr, "Error reading chunk header\n");
+			return (-1);
+		}
+
+		if (sparse_header.chunk_hdr_sz > CHUNK_HEADER_LEN) {
+			/* Skip the remaining bytes in a header that is longer than
+			 * we expected.
+			 */
+			lseek64(in, sparse_header.chunk_hdr_sz - CHUNK_HEADER_LEN, SEEK_CUR);
+		}
+
+		switch (chunk_header.chunk_type) {
+		    case CHUNK_TYPE_RAW:
+			if (chunk_header.total_sz != (sparse_header.chunk_hdr_sz +
+				 (chunk_header.chunk_sz * sparse_header.blk_sz)) ) {
+				fprintf(stderr, "Bogus chunk size for chunk %d, type Raw\n", i);
+				return (-1);
+			}
+			total_blocks += process_raw_chunk(in, out,
+					 chunk_header.chunk_sz, sparse_header.blk_sz, &crc32);
+			break;
+		    case CHUNK_TYPE_FILL:
+			if (chunk_header.total_sz != (sparse_header.chunk_hdr_sz + sizeof(u32)) ) {
+				fprintf(stderr, "Bogus chunk size for chunk %d, type Fill\n", i);
+				return (-1);
+			}
+			total_blocks += process_fill_chunk(in, out,
+					 chunk_header.chunk_sz, sparse_header.blk_sz, &crc32);
+			break;
+		    case CHUNK_TYPE_DONT_CARE:
+			if (chunk_header.total_sz != sparse_header.chunk_hdr_sz) {
+				fprintf(stderr, "Bogus chunk size for chunk %d, type Dont Care\n", i);
+				return (-1);
+			}
+			total_blocks += process_skip_chunk(out,
+					 chunk_header.chunk_sz, sparse_header.blk_sz, &crc32);
+			break;
+		    case CHUNK_TYPE_CRC32:
+			process_crc32_chunk(in, crc32);
+			break;
+		    default:
+			fprintf(stderr, "Unknown chunk type 0x%4.4x\n", chunk_header.chunk_type);
+		}
+
+	}
+
+	/* If the last chunk was a skip, then the code just did a seek, but
+	 * no write, and the file won't actually be the correct size.  This
+	 * will make the file the correct size.  Make sure the offset is
+	 * computed in 64 bits, and the function called can handle 64 bits.
+	 */
+#ifndef CONFIG_OUT_DEV_PART
+	//if (ftruncate64(out, (u64)total_blocks * sparse_header.blk_sz)) {
+	//	fprintf(stderr, "Error calling ftruncate() to set the image size\n");
+	//	return (-1);
+	//}
+#endif
+
+	//close(in);
+	//close(out);
+
+	if (sparse_header.total_blks != total_blocks) {
+		fprintf(stderr, "Wrote %d blocks, expected to write %d blocks\n",
+			 total_blocks, sparse_header.total_blks);
+		return (-1);
+	}
+
+	return (0);
+}
+
+#else
+int sparse_main(char *src, char *dest, off_t offset)
+{
+	int in;
+	int out;
+	unsigned int i;
+	sparse_header_t sparse_header;
+	chunk_header_t chunk_header;
+	u32 crc32 = 0;
+	u32 total_blocks = 0;
+	int ret;
+
+
+	if ( (copybuf = malloc(COPY_BUF_SIZE)) == 0) {
+		fprintf(stderr, "Cannot malloc copy buf\n");
+		return (-1);
+	}
+
+	if ((in = open(src, O_RDONLY)) == 0) {
+		fprintf(stderr, "Cannot open input file %s\n", src);
+		return (-1);
+	}
+
+    lseek64(in, offset, SEEK_SET);
+
+	if ((out = open(dest, O_WRONLY | O_TRUNC, 0666)) == 0) {
+		fprintf(stderr, "Cannot open output file %s\n", dest);
+		return (-1);
+	}
+
+	ret = read_all(in, &sparse_header, sizeof(sparse_header));
+	if (ret != sizeof(sparse_header)) {
+		fprintf(stderr, "Error reading sparse file header\n");
+		return (-1);
+	}
+
+	if (sparse_header.magic != SPARSE_HEADER_MAGIC) {
+		fprintf(stderr, "Bad magic\n");
+		return (-1);
+	}
+
+	if (sparse_header.major_version != SPARSE_HEADER_MAJOR_VER) {
+		fprintf(stderr, "Unknown major version number\n");
+		return (-1);
+	}
+
+	if (sparse_header.file_hdr_sz > SPARSE_HEADER_LEN) {
+		/* Skip the remaining bytes in a header that is longer than
+		 * we expected.
+		 */
+		lseek64(in, sparse_header.file_hdr_sz - SPARSE_HEADER_LEN, SEEK_CUR);
+	}
+
+	if ( (zerobuf = malloc(sparse_header.blk_sz)) == 0) {
+		fprintf(stderr, "Cannot malloc zero buf\n");
+		return (-1);
+	}
+
+	for (i=0; i<sparse_header.total_chunks; i++) {
+		ret = read_all(in, &chunk_header, sizeof(chunk_header));
+		if (ret != sizeof(chunk_header)) {
+			fprintf(stderr, "Error reading chunk header\n");
+			return (-1);
+		}
+
+		if (sparse_header.chunk_hdr_sz > CHUNK_HEADER_LEN) {
+			/* Skip the remaining bytes in a header that is longer than
+			 * we expected.
+			 */
+			lseek64(in, sparse_header.chunk_hdr_sz - CHUNK_HEADER_LEN, SEEK_CUR);
+		}
+
+		switch (chunk_header.chunk_type) {
+		    case CHUNK_TYPE_RAW:
+			if (chunk_header.total_sz != (sparse_header.chunk_hdr_sz +
+				 (chunk_header.chunk_sz * sparse_header.blk_sz)) ) {
+				fprintf(stderr, "Bogus chunk size for chunk %d, type Raw\n", i);
+				return (-1);
+			}
+			total_blocks += process_raw_chunk(in, out,
+					 chunk_header.chunk_sz, sparse_header.blk_sz, &crc32);
+			break;
+		    case CHUNK_TYPE_FILL:
+			if (chunk_header.total_sz != (sparse_header.chunk_hdr_sz + sizeof(u32)) ) {
+				fprintf(stderr, "Bogus chunk size for chunk %d, type Fill\n", i);
+				return (-1);
+			}
+			total_blocks += process_fill_chunk(in, out,
+					 chunk_header.chunk_sz, sparse_header.blk_sz, &crc32);
+			break;
+		    case CHUNK_TYPE_DONT_CARE:
+			if (chunk_header.total_sz != sparse_header.chunk_hdr_sz) {
+				fprintf(stderr, "Bogus chunk size for chunk %d, type Dont Care\n", i);
+				return (-1);
+			}
+			total_blocks += process_skip_chunk(out,
+					 chunk_header.chunk_sz, sparse_header.blk_sz, &crc32);
+			break;
+		    case CHUNK_TYPE_CRC32:
+			process_crc32_chunk(in, crc32);
+			break;
+		    default:
+			fprintf(stderr, "Unknown chunk type 0x%4.4x\n", chunk_header.chunk_type);
+		}
+
+	}
+
+	/* If the last chunk was a skip, then the code just did a seek, but
+	 * no write, and the file won't actually be the correct size.  This
+	 * will make the file the correct size.  Make sure the offset is
+	 * computed in 64 bits, and the function called can handle 64 bits.
+	 */
+#ifndef CONFIG_OUT_DEV_PART
+	if (ftruncate64(out, (u64)total_blocks * sparse_header.blk_sz)) {
+		fprintf(stderr, "Error calling ftruncate() to set the image size\n");
+		return (-1);
+	}
+#endif
+
+	close(in);
+	close(out);
+
+	if (sparse_header.total_blks != total_blocks) {
+		fprintf(stderr, "Wrote %d blocks, expected to write %d blocks\n",
+			 total_blocks, sparse_header.total_blks);
+		return (-1);
+	}
+
+	return (0);
+}
+#endif
diff --git a/handlers/sparse/simg2img.h b/handlers/sparse/simg2img.h
new file mode 100755
index 0000000..26e54f5
--- /dev/null
+++ b/handlers/sparse/simg2img.h
@@ -0,0 +1,6 @@
+#ifndef __SPARE_HEAD_H__
+#define __SPARE_HEAD_H__
+
+int sparse_main(int in, int out, off_t offset);
+
+#endif
\ No newline at end of file
diff --git a/handlers/sparse/spare_head.h b/handlers/sparse/spare_head.h
new file mode 100755
index 0000000..69591bd
--- /dev/null
+++ b/handlers/sparse/spare_head.h
@@ -0,0 +1,122 @@
+#ifndef __SPARE_HEAD_H__
+#define __SPARE_HEAD_H__
+
+#define WORK_MODE_PRODUCT           (1<<4)
+#define WORK_MODE_UPDATE            (1<<5)
+
+#define WORK_MODE_BOOT			    0x00	
+#define WORK_MODE_USB_PRODUCT	    0x10
+#define WORK_MODE_CARD_PRODUCT	    0x11
+#define WORK_MODE_USB_DEBUG	        0x12 
+#define WORK_MODE_SPRITE_RECOVERY   0x13
+#define WORK_MODE_CARD_UPDATE	    0x14	/* pdate firmware from sdcard */
+#define WORK_MODE_USB_UPDATE	    0x20
+#define WORK_MODE_OUTER_UPDATE	    0x21
+
+#define WORK_MODE_USB_TOOL_PRODUCT	0x04
+#define WORK_MODE_USB_TOOL_UPDATE	0x08
+#define WORK_MODE_ERASE_KEY			0x20
+
+#define UBOOT_MAGIC				    "uboot"
+#define STAMP_VALUE                 0x5F0A6C39
+#define ALIGN_SIZE				    (16 * 1024)
+#define MAGIC_SIZE                  8
+#define STORAGE_BUFFER_SIZE         (256)
+
+#define SUNXI_UPDATE_NEXT_ACTION_NORMAL			(1)
+#define SUNXI_UPDATE_NEXT_ACTION_REBOOT			(2)
+#define SUNXI_UPDATE_NEXT_ACTION_SHUTDOWN		(3)
+#define SUNXI_UPDATE_NEXT_ACTION_REUPDATE		(4)
+#define SUNXI_UPDATE_NEXT_ACTION_BOOT			(5)
+#define SUNXI_UPDATA_NEXT_ACTION_SPRITE_TEST    (6)
+
+#define SUNXI_VBUS_UNKNOWN                      (0)
+#define SUNXI_VBUS_EXIST                        (1)
+#define SUNXI_VBUS_NOT_EXIST                    (2)
+
+#define BOOT0_SDMMC_START_ADDR                  (16)
+#define BOOT0_SDMMC_BACKUP_START_ADDR           (256)
+
+#define BOOT0_EMMC3_START_ADDR                  (384)
+#define BOOT0_EMMC3_BACKUP_START_ADDR           (512)
+
+
+#define UBOOT_START_SECTOR_IN_SDMMC             (32800)
+#define UBOOT_BACKUP_START_SECTOR_IN_SDMMC      (24576)
+
+
+#define SUNXI_NORMAL_MODE                            0
+#define SUNXI_SECURE_MODE_WITH_SECUREOS              1
+#define SUNXI_SECURE_MODE_NO_SECUREOS                2
+
+typedef enum _SUNXI_BOOT_FILE_MODE
+{
+	SUNXI_BOOT_FILE_NORMAL =0,
+	SUNXI_BOOT_FILE_TOC = 1,
+	SUNXI_BOOT_FILE_RES0 = 2,
+	SUNXI_BOOT_FILE_RES1 = 3,
+	SUNXI_BOOT_FILE_PKG = 4
+}SUNXI_BOOT_FILE_MODE;
+
+
+
+#define   BOOT_FROM_SD0     0
+#define   BOOT_FROM_SD2     2
+#define   BOOT_FROM_NFC     1
+#define   BOOT_FROM_SPI     3
+
+#if 0
+//#define	TOC_MAIN_INFO_STATUS_ENCRYP_NOT_USED	0x00
+//#define	TOC_MAIN_INFO_STATUS_ENCRYP_SSK		0x01
+//#define	TOC_MAIN_INFO_STATUS_ENCRYP_BSSK		0x02
+#endif
+#define SUNXI_SECURE_MODE_USE_SEC_MONITOR             1
+
+#define	TOC_ITEM_ENTRY_STATUS_ENCRYP_NOT_USED	0x00
+#define	TOC_ITEM_ENTRY_STATUS_ENCRYP_USED		0x01
+
+#define	TOC_ITEM_ENTRY_TYPE_NULL				0x00
+#define	TOC_ITEM_ENTRY_TYPE_KEY_CERTIF			0x01
+#define	TOC_ITEM_ENTRY_TYPE_BIN_CERTIF			0x02
+#define	TOC_ITEM_ENTRY_TYPE_BIN     			0x03
+#define TOC_ITEM_ENTRY_TYPE_LOGO                0x04
+
+typedef struct _normal_gpio_cfg
+{
+    char port;                      
+    char port_num;                 
+    char mul_sel;                   
+    char pull;                       
+    char drv_level;                 
+    char data;                     
+    char reserved[2];                
+}
+normal_gpio_cfg;
+
+typedef struct _special_gpio_cfg
+{
+	unsigned char port;				
+	unsigned char port_num;			
+	char mul_sel;			
+	char data;				
+}special_gpio_cfg;
+
+typedef struct sdcard_spare_info_t
+{
+	int card_no[4];                 
+	int speed_mode[4];                
+	int line_sel[4];                  
+	int line_count[4];               
+}
+sdcard_spare_info;
+
+typedef enum
+{
+	STORAGE_NAND =0,
+	STORAGE_SD,
+	STORAGE_EMMC,
+	STORAGE_NOR,
+    STORAGE_EMMC3
+}SUNXI_BOOT_STORAGE;
+
+#endif
\ No newline at end of file
diff --git a/handlers/sparse/sparse_crc32.c b/handlers/sparse/sparse_crc32.c
new file mode 100755
index 0000000..9336b1d
--- /dev/null
+++ b/handlers/sparse/sparse_crc32.c
@@ -0,0 +1,111 @@
+/*-
+ *  COPYRIGHT (C) 1986 Gary S. Brown.  You may use this program, or
+ *  code or tables extracted from it, as desired without restriction.
+ */
+
+/*
+ *  First, the polynomial itself and its table of feedback terms.  The
+ *  polynomial is
+ *  X^32+X^26+X^23+X^22+X^16+X^12+X^11+X^10+X^8+X^7+X^5+X^4+X^2+X^1+X^0
+ *
+ *  Note that we take it "backwards" and put the highest-order term in
+ *  the lowest-order bit.  The X^32 term is "implied"; the LSB is the
+ *  X^31 term, etc.  The X^0 term (usually shown as "+1") results in
+ *  the MSB being 1
+ *
+ *  Note that the usual hardware shift register implementation, which
+ *  is what we're using (we're merely optimizing it by doing eight-bit
+ *  chunks at a time) shifts bits into the lowest-order term.  In our
+ *  implementation, that means shifting towards the right.  Why do we
+ *  do it this way?  Because the calculated CRC must be transmitted in
+ *  order from highest-order term to lowest-order term.  UARTs transmit
+ *  characters in order from LSB to MSB.  By storing the CRC this way
+ *  we hand it to the UART in the order low-byte to high-byte; the UART
+ *  sends each low-bit to hight-bit; and the result is transmission bit
+ *  by bit from highest- to lowest-order term without requiring any bit
+ *  shuffling on our part.  Reception works similarly
+ *
+ *  The feedback terms table consists of 256, 32-bit entries.  Notes
+ *
+ *      The table can be generated at runtime if desired; code to do so
+ *      is shown later.  It might not be obvious, but the feedback
+ *      terms simply represent the results of eight shift/xor opera
+ *      tions for all combinations of data and CRC register values
+ *
+ *      The values must be right-shifted by eight bits by the "updcrc
+ *      logic; the shift must be unsigned (bring in zeroes).  On some
+ *      hardware you could probably optimize the shift in assembler by
+ *      using byte-swap instructions
+ *      polynomial $edb88320
+ *
+ *
+ * CRC32 code derived from work by Gary S. Brown.
+ */
+
+/* Code taken from FreeBSD 8 */
+#include "ext4_utils.h"
+
+static u32 crc32_tab[] = {
+        0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
+        0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
+        0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
+        0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
+        0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
+        0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
+        0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,
+        0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
+        0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
+        0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
+        0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,
+        0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
+        0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
+        0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
+        0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
+        0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
+        0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
+        0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
+        0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
+        0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
+        0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
+        0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
+        0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
+        0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
+        0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
+        0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
+        0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
+        0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
+        0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
+        0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
+        0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
+        0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
+        0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
+        0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
+        0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
+        0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
+        0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
+        0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
+        0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
+        0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
+        0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
+        0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
+        0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
+};
+
+/*
+ * A function that calculates the CRC-32 based on the table above is
+ * given below for documentation purposes. An equivalent implementation
+ * of this function that's actually used in the kernel can be found
+ * in sys/libkern.h, where it can be inlined.
+ */
+
+u32 sparse_crc32(u32 crc_in, const void *buf, int size)
+{
+        const u8 *p = buf;
+        u32 crc;
+
+        crc = crc_in ^ ~0U;
+        while (size--)
+                crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
+        return crc ^ ~0U;
+}
+
diff --git a/handlers/sparse/sparse_crc32.h b/handlers/sparse/sparse_crc32.h
new file mode 100755
index 0000000..21625ba
--- /dev/null
+++ b/handlers/sparse/sparse_crc32.h
@@ -0,0 +1,18 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+u32 sparse_crc32(u32 crc, const void *buf, size_t size);
+
diff --git a/handlers/sparse/sparse_format.h b/handlers/sparse/sparse_format.h
new file mode 100755
index 0000000..6c62c34
--- /dev/null
+++ b/handlers/sparse/sparse_format.h
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+typedef struct sparse_header {
+  __le32	magic;		/* 0xed26ff3a */
+  __le16	major_version;	/* (0x1) - reject images with higher major versions */
+  __le16	minor_version;	/* (0x0) - allow images with higer minor versions */
+  __le16	file_hdr_sz;	/* 28 bytes for first revision of the file format */
+  __le16	chunk_hdr_sz;	/* 12 bytes for first revision of the file format */
+  __le32	blk_sz;		/* block size in bytes, must be a multiple of 4 (4096) */
+  __le32	total_blks;	/* total blocks in the non-sparse output image */
+  __le32	total_chunks;	/* total chunks in the sparse input image */
+  __le32	image_checksum; /* CRC32 checksum of the original data, counting "don't care" */
+				/* as 0. Standard 802.3 polynomial, use a Public Domain */
+				/* table implementation */
+} sparse_header_t;
+
+#define SPARSE_HEADER_MAGIC	0xed26ff3a
+
+#define CHUNK_TYPE_RAW		0xCAC1
+#define CHUNK_TYPE_FILL		0xCAC2
+#define CHUNK_TYPE_DONT_CARE	0xCAC3
+#define CHUNK_TYPE_CRC32    0xCAC4
+
+typedef struct chunk_header {
+  __le16	chunk_type;	/* 0xCAC1 -> raw; 0xCAC2 -> fill; 0xCAC3 -> don't care */
+  __le16	reserved1;
+  __le32	chunk_sz;	/* in blocks in output image */
+  __le32	total_sz;	/* in bytes of chunk input file including chunk header and data */
+} chunk_header_t;
+
+/* Following a Raw or Fill or CRC32 chunk is data.
+ *  For a Raw chunk, it's the data in chunk_sz * blk_sz.
+ *  For a Fill chunk, it's 4 bytes of the fill data.
+ *  For a CRC32 chunk, it's 4 bytes of CRC32
+ */
+
-- 
2.29.0

